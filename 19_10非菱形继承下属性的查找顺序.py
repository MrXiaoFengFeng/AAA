

#二、 如果多继承是非菱形继承，经典类与新式类属性查找顺序一样
# 都是一个分支一个分支的去查找，然后最后找object



# 三、如果多继承是非菱形继承，经典类与新式类属性查找顺序不一样：
#     经典类：深度优先，会在检索第一条分支的时候就直接一条道走到黑，即会检索大脑袋（共同的父类）
#     新式类：广度优先，会在检索最后一条分支的时候就检索大脑袋（共同的父类）


# 总结：
# 多继承要不要用？？
# 要用，但是规避几点问题：
# 1、继承结构尽量不要过于复杂
# 2推荐使用mixins机制：在多继承的背景下，满足继承的什么 “是”什么的关系